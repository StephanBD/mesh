//-------------------mixins----------------------------------//
@mixin grid-crjaj(
  $columns: 1fr,
  $rows: 1fr,
  $justify-content: start,
  $align-items: start,
  $justify-items: start
) {
  display: grid;
  gap: 0;
  grid-template-columns: $columns;
  grid-template-rows: $rows;

  justify-content: $justify-content;
  justify-items: $justify-items;
  align-items: $align-items;
}

@mixin grid_item(
  $justify-self,
  $align-self,
  $grid-column,
  $grid-row,
  $grid-row-end: 1,
  $grid-row-start: 1,
  $grid-column-start: 1,
  $grid-column-end: 1
) {
  justify-self: $justify-self;
  align-self: $align-self;

  grid-column: $grid-column;
  grid-row: $grid-row;

  grid-column-end: $grid-column-end;
  grid-row-end: $grid-row-end;
  grid-column-start: $grid-column-start;
  grid-row-start: $grid-row-start;
}
//-------------------columns----------------------------------//
.col {
  display: grid;
  --col-size: 1fr;
  // this var can be changed by putting it in the parent tag:   style="--col-size:100px"
  grid-template-rows: 1fr;
  grid-template-columns: repeat(1, var(--col-size, 1fr));

  // row, column, dense
  grid-auto-flow: dense;

  //-------------------justify----------------------------------//
  @each $value in $justify-content {
    &-#{$value} {
      justify-content: #{$value};
    }
  }

  //-------------------symmetric columns (1-12 cols)------------------//
  @each $key, $value in $numbers {
    &-#{$key} {
      @extend .col;
      @include from($md) {
        grid-template-columns: repeat($key, var(--col-size, 1fr));
      }
      grid-template-columns: 1fr;
    }
  }

  //-------------------asymmetric columns----------------------------------//
  &--1-auto-1 {
    display: grid;
    @include from($xl) {
      grid-template-columns: 1fr max-content 1fr;
    }
  }
  &--2-1 {
    display: grid;
    @include from($md) {
      grid-template-columns: 2fr 1fr;
    }
  }
  &--3-1 {
    display: grid;
    @include from($md) {
      grid-template-columns: 3fr 1fr;
    }
  }
  &--1-2 {
    display: grid;
    @include from($md) {
      grid-template-columns: 1fr 2fr;
    }
  }
  &--1-3 {
    display: grid;
    @include from($md) {
      grid-template-columns: 1fr 3fr;
    }
  }
  &--6-4 {
    display: grid;
    @include from($md) {
      grid-template-columns: 6fr 4fr;
    }
  }
  &--4-6 {
    display: grid;
    @include from($md) {
      grid-template-columns: 4fr 6fr;
    }
  }

  //-----------------//
  // good for navbar with logo and menu
  &-fit-menu {
    display: grid;
    grid-template-columns: max-content 1fr;
  }
  &-menu-fit {
    display: grid;
    grid-template-columns: 1fr max-content;
  }
  &--1-content-1 {
    display: grid;
    grid-template-columns: minmax(100px, 1fr) 1fr minmax(100px, 1fr);
  }
}
// ==================grid row================
.row {
  --row-size: 1fr;
  display: grid;
  grid-template-rows: repeat(1, var(--row-size));

  @each $key, $value in $numbers {
    &-#{$key} {
      @extend .row;
      grid-template-rows: repeat($key, var(--row-size));
    }
  }
}
//---------------------align content------------------------------//
// justify-items: start , end , center , stretch;
// align-items: start , end , center , stretch;
// justify-content: start, end, center, stretch, space-around, space-between, space-evenly;

@each $value in $justify-content {
  .content-#{$value},
  .justify-#{$value} {
    justify-content: #{$value};
  }
}

.place {
  @each $key in $align-items {
    &-#{$key} {
      @each $value in $justify-items {
        &-#{$value} {
          place-items: $key $value;
        }
      }
    }
  }
}
// @each $key in $align-items {
//   .#{$key} {
//     @each $value in $justify-items {
//       &-#{$value} {
//         place-items: $key $value;
//       }
//     }
//   }
// }

// grid gap-----------------------------
.gap {
  gap: $padding;
  &-2 {
    gap: $padding * 2;
  }
  &-3 {
    gap: $padding * 3;
  }
}
// .stretch > * {
//   height: auto;
// }

// grid childs ----------------------
.item {
  &-left {
    justify-self: start;
    align-self: start;
  }
  &-center {
    justify-self: center;
    align-self: center;
  }
  &-right {
    justify-self: end;
    align-self: end;
  }
  &-full {
    grid-column: 1 / column-line-end;
    grid-row: 1 / row-line-end;
  }
  &-full-h {
    grid-column: 1 / column-line-end;
  }
  &-full-v {
    grid-row: 1 / row-line-end;
  }

  // number of columns taken per child item
  &-2 {
    @include from($md) {
      grid-column-end: span 2;
    }
  }
  &-3 {
    @include from($md) {
      grid-column-end: span 3;
    }
  }
  &-4 {
    @include from($md) {
      grid-column-end: span 4;
    }
  }
}



/*
      grid
grid-column-gap
grid-row-gap
gap

grid-template-columns: max-content  50px 40px;
grid-template-rows: repeat(1, var(--col-size, 1fr));
  
grid-auto-flow: dense; // row, column, dense

justify-content: ;

place-items: 
  justify-items
  align-items

      items
justify-self: start; // center end
align-self: start;

grid-area

grid-column:
grid-row:

grid-column-end: span 2;

*/



