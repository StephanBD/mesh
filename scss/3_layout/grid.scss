//==========================grid==========================//
$align-items: (start, end, center, stretch);
$justify-items: (start, end, center, stretch);
$justify-content: (
  start,
  end,
  center,
  stretch,
  space-around,
  space-between,
  space-evenly
);
//-------------------columns----------------------------------//
.col {
  display: grid;
  --col-size: 1fr;
  // this var can be changed by putting this in the parent tag:   style="--col-size:100px"
  grid-template-rows: 1fr;
  grid-template-columns: repeat(1, var(--col-size, 1fr));

  // childs height size not stretch
  // & > * {
  //   height: min-content;
  // }

  // row, column, dense
  grid-auto-flow: dense;

  //-------------------justify----------------------------------//
  @each $value in $justify-content {
    &-#{$value} {
      justify-content: #{$value};
    }
  }

  //-------------------symmetric columns (1-12 cols)------------------//
  @each $key, $value in $numbers {
    &-#{$key} {
      @extend .col;
      @include from($md) {
        grid-template-columns: repeat($key, var(--col-size, 1fr));
      }
      grid-template-columns: 1fr;
    }
  }

  //-------------------asymmetric columns----------------------------------//
  &--1-auto-1 {
    @include from($xl) {
      grid-template-columns: 1fr max-content 1fr;
    }
  }
  // --------------- //
  &--2-1 {
    @include from($md) {
      grid-template-columns: 2fr 1fr;
    }
  }
  &--3-1 {
    @include from($md) {
      grid-template-columns: 3fr 1fr;
    }
  }
  &--1-2 {
    @include from($md) {
      grid-template-columns: 1fr 2fr;
    }
  }
  &--1-3 {
    @include from($md) {
      grid-template-columns: 1fr 3fr;
    }
  }
  &--6-4 {
    @include from($md) {
      grid-template-columns: 6fr 4fr;
    }
  }
  &--4-6 {
    @include from($md) {
      grid-template-columns: 4fr 6fr;
    }
  }

  //-----------------//
  // good for navbar with logo and menu
  &-fit-menu {
    grid-template-columns: max-content 1fr;
  }
  &-menu-fit {
    grid-template-columns: 1fr max-content;
  }
}
// ==================grid row================
.row {
  --row-size: 1fr;
  display: grid;
  grid-template-rows: repeat(1, var(--row-size));

  @each $key, $value in $numbers {
    &-#{$key} {
      @extend .row;
      grid-template-rows: repeat($key, var(--row-size));
    }
  }
}
//---------------------align content------------------------------//
// justify-items: start , end , center , stretch;
// align-items: start , end , center , stretch;
// justify-content: start, end, center, stretch, space-around, space-between, space-evenly;

@each $value in $justify-content {
  .content-#{$value},
  .justify-#{$value} {
    justify-content: #{$value};
  }
}

.place {
  @each $key in $align-items {
    &-#{$key} {
      @each $value in $justify-items {
        &-#{$value} {
          place-items: $key $value;
        }
      }
    }
  }
}

// grid gap-----------------------------
.gap {
  gap: $padding;
  &-2 {
    gap: $padding * 2;
  }
  &-3 {
    gap: $padding * 3;
  }
}
// .stretch > * {
//   height: auto;
// }

// grid childs ----------------------
.item {
  &-left {
    justify-self: start;
    align-self: start;
  }
  &-center {
    justify-self: center;
    align-self: center;
  }
  &-right {
    justify-self: end;
    align-self: end;
  }
  &-full-h {
    grid-column: 1 / column-line-end;
    grid-row: 1 / row-line-end;
  }
  &-full-h {
    grid-column: 1 / column-line-end;
  }
  &-full-v {
    grid-row: 1 / row-line-end;
  }

  // number of columns taken per child item
  &-2 {
    grid-column-end: span 2;
  }
  &-3 {
    grid-column-end: span 3;
  }
  &-4 {
    grid-column-end: span 4;
  }
}
