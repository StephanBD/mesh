//-------------------custom checkbox chrome----------------------------------//
// $width-box: 15px;
// input[type="checkbox"] {
//   position: relative;
//   margin-left: $margin;
//   margin-right: $margin;
//   // left: -1000%;
//   // display: inline;
//   cursor: pointer;
//   height: 1;
//   width: 0;
//   // appearance: none;
//   position: relative;
//   // margin: 0 15px ;
//   // transform: translateY(2px);
// }
// input[type="checkbox"]:hover::after {
//   background-color: var(--gray-light);
// }

// input[type="checkbox"]::after {
//   content: "";
//   position: absolute;
//   display: inline-block;
//   top: 50%;
//   left: 50%;
//   transform: translate(-50%, -50%);

//   height: $width-box;
//   width: $width-box;
//   color: var(--quaternary);
//   background-color: var(--white);
//   text-align: center;
//   font-size: $width-box - ($width-box / 4);
//   font-weight: $bold;
//   line-height: $width-box;

//   border: 1px solid $gray;
//   border-radius: $border-radius;
//   // border-radius: 50%;
// }
// input[type="checkbox"]:checked::after {
//   content: "\02713";
// }

//-------------------badge----------------------------------//
// this require that the father to have position:relative
@mixin badge($background: white, $color: initial) {
  background-color: $background;
  color: $color;

  position: absolute;
  display: block;
  top: 0;
  right: 0;

  text-align: center;
  font-size: 11px;
  border-radius: 30%;
  padding: 3px;
  min-width: 10px;
  min-height: min-content;
}

.badge {
  @include badge(red, white);
}
// background 2 colors ------------------------------
@mixin linear-gradient(
  $directionDeg: 0deg,
  $first-color: black,
  $second-color: white,
  $background: initial
) {
  background: $background;
  background: linear-gradient($directionDeg, $first-color, $second-color);
}

.bg-divided {
  @include linear-gradient(
    90deg,
    rgba(237, 237, 237, 1) 50%,
    rgba(19, 19, 19, 1) 50%
  );
}

//-------------------ul gap----------------------------------//
@mixin margenes($value, $direction) {
  @if $direction == "right left" or $direction == "left right" {
    margin-left: $margin * $value;
    margin-right: $margin * $value;
  } @else if $direction == "top bottom" or $direction == "bottom top" {
    margin-top: $margin * $value;
    margin-bottom: $margin * $value;
  } @else if $direction == "all" {
    margin: $margin * $value;
  } @else {
    margin-#{$direction}: $margin * $value;
  }
}

ol.gap,
ul.gap {
  & > li {
    // margin: $margin * 0.5;
    @include margenes(0.5, "all");
  }

  &-x {
    & > li {
      // margin-left: $margin * 0.5;
      // margin-right: $margin * 0.5;
      @include margenes(0.5, "left right");
    }
    &-2 > li {
      // margin-right: $margin * 1;
      // margin-left: $margin * 1;
      @include margenes(1, "left right");
    }
  }
  &-y {
    & > li {
      @include margenes(0.5, "bottom top");
      // margin-top: $margin * 0.5;
      // margin-bottom: $margin * 0.5;
    }
    &-2 > li {
      @include margenes(1, "bottom top");
      // margin-bottom: $margin * 1;
      // margin-top: $margin * 1;
    }
  }
}

//---------------- gap between childs - row -------------------------//

@mixin separateRow($value: $margin) {
  & > *:not(:first-child) {
    margin-left: $value;
  }
  & > *:not(:last-child) {
    margin-right: $value;
  }
}

.gap-row {
  @include separateRow($margin / 2);
  &-2 {
    @include separateRow($margin);
  }
}
//---- gap between childs - column -----//

@mixin separateColumn($value: $margin) {
  & > *:not(:first-child) {
    margin-top: $value;
  }
  & > *:not(:last-child) {
    margin-bottom: $value;
  }
}

.gap-col {
  @include separateColumn($margin / 2);
  &-2 {
    @include separateColumn($margin);
  }
}

//==========================efects==========================//
// mix-blend-mode
.blend-black {
  background-color: black;
  mix-blend-mode: multiply;
}
.blend-white {
  background-color: white;
  mix-blend-mode: screen;
}

// characters as images
.imgvg {
  background: url('data:image/svg+xml,\
  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100">\
    <style>@keyframes foo %7Bto %7B transform: rotate(-10deg)}}</style>\
    <text y="1em" font-size="100" style="animation: foo 1s infinite alternate">ðŸ˜ˆ</text>\
  </svg>');
  background-size: 100px 100px;
}

// hamburger lines ===
.hamburger {
  display: flex;
  width: 100%;
  align-items: center;
}

.hamburger::before,
.hamburger::after {
  content: "";
  height: 0.2em;
  margin: 0.2em;
  // background-color: gray;
  border: solid gray;
  border-width: 0.05em 0;
  flex: 1;
}

// focus , not must used 2018
li:focus-within ul {
  display: initial;
}

// flex without media query
// .article {
//   display: flex;
//   flex-wrap: wrap;
// }
// .header {
//   flex: 1;
// }
// .post {
//   flex: 9999;
//   min-width: 50em;
// }

// -------------
// .post {
//   grid-auto-flow: column;
// }

// gradient
.pie {
  background: conic-gradient(red, yellow, lime, aqua, blue, fuchsia, red);
}

//-----------------------------------------------------//
@mixin parallelogram {
  --width: 100px;
  background: red;
  display: inline-block;
  width: var(--width);
  margin-right: -14px;
  clip-path: polygon(0% 0%, calc(var(--width) - 10px) 0%, 100% 100%, 10px 100%);
  text-align: center;
  color: white;
  transition: all 0.3s;
}

//-------------------carousel hover----------------------------------//
// container
@mixin carousel {
  &:hover > * {
    opacity: 0.3;
  }
  &:hover > *:hover {
    opacity: 1;
    transform: scale(1.5);
  }
  & > * {
    transform-origin: center left;
    transition: 450ms;
  }
}
